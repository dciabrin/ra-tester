#!/usr/bin/env python

'''Resource Agents Tester

An automated test shooter to validate the behaviour of OCF
resource agents.

Relies on Pacemaker's Cluster Test Suite
'''

__copyright__ = '''
Copyright (C) 2015-2016 Damien Ciabrini <dciabrin@redhat.com>
Licensed under the GNU GPL.
'''

#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA.


import sys, signal, time, os, re, string, subprocess, tempfile
import argparse
import inspect
import yaml
import traceback
import os

from cts.CTS import CtsLab
from cts.CM_corosync import crm_corosync
from cts.CTSaudits import AuditList, LogAudit
from cts.logging   import LogFactory
from cts.remote    import AsyncRemoteCmd, RemoteExec, RemoteFactory

# from racts.cluster import autodetect_cluster_manager
# from racts.package import autodetect_package_manager
# from racts.container import autodetect_container_engine
from racts.distrib import autodetect_distribution
from racts.rafencing import RATesterDefaultFencing
from racts.rarunner import RARunner
from racts.raaudit import RATesterAuditList
from racts.ctsoverride import *

# These are globals so they can be used by the signal handler.
cluster_manager = None
scenario = None

def load_ra_modules():
    modules = []
    for d in os.listdir('ra'):
        if os.path.isfile(os.path.join('ra',d,'__init__.py')):
            try:
                m = __import__('ra.'+d, fromlist=['ra'])
                # TODO sanity checks
                modules.append(m)
            except ImportError as e:
                print("Error when importing RA module %s:"%d)
                traceback.print_exc()
                print()
                pass
    return modules

def sig_handler(signum, frame) :
    LogFactory().log("Interrupted by signal %d"%signum)
    if scenario: scenario.summarize()
    if signum == 15 :
        if scenario: scenario.TearDown()
        sys.exit(1)


def build_test_list(cluster_manager, ra_modules, all_audits):
    result = {}
    for module in ra_modules:
        result[module]=[]
        for testclass in module.tests:
            bound_test = testclass(cluster_manager)
            if bound_test.is_applicable():
                bound_test.Audits = all_audits
                result[module].append(bound_test)
    return result

def build_scenario_list(env, ra_modules):
    result = {}
    for module in ra_modules:
        result[module]={}
        for scenario in module.scenarios.keys():
            result[module][scenario]=[]
            for componentclass in module.scenarios[scenario]:
                bound_component = componentclass(env)
                result[module][scenario].append(bound_component)
    return result

def build_fencing_list(env, ra_modules):
    result = {}
    for module in ra_modules:
        if 'fencing' in dir(module):
            fencing_component = module.fencing(env)
            if fencing_component.IsApplicable():
                result[module] = fencing_component
            else:
                result[module] = None
        else:
            result[module] = None
    return result

def count_all_tests(selected):
    # for s in selected.keys():
    #     print(list(selected[s].values()))
    scenarios = sum([list(selected[s].values()) for s in selected.keys()],[])
    tests = [s["tests"] for s in scenarios]
    return len(sum(tests,[]))

def prepare_cts():
    # continue watching when one node goes away
    monkey_patch_cts_log_watcher()
    # prevent deadlock with SSH + control master
    monkey_patch_cts_remote_commands()
    # prevent hostname checks at setup time, so we can use a custom
    # ssh config file to connect to the nodes
    monkey_patch_cts_env_node_setup()
    monkey_patch_node_state()

def parse_and_strip_ratester_args(sysargs):
    parser=argparse.ArgumentParser(sys.argv[0], add_help=False)
    parser.add_argument('--ssh', help='ssh config file that to connect to nodes')
    parser.add_argument('--nodes', help='nodes to use for the tests')
    args, unknownargs = parser.parse_known_args()
    if any(x in unknownargs for x in ("-h", "--help")):
        parser.print_help()
        print()
    if args.ssh != None:
        rsh=RemoteFactory.rsh
        file_flag = " -F %s"%args.ssh
        rsh.Command += file_flag
        rsh.CpCommand += file_flag
    return unknownargs

def parse_cluster_args_and_sanitize_node_args(cts_args):
    parser=argparse.ArgumentParser(cts_args, add_help=False)
    parser.add_argument('--nodes', help='ssh config file that to connect to nodes')
    args, unknownargs = parser.parse_known_args()
    clusters=None
    try:
        clusters=yaml.load(args.nodes)
        assert isinstance(clusters, list)
        assert [isinstance(c, list) for c in clusters]
        assert [[isinstance(n, str) for n in c] for c in clusters]
    except yaml.parser.ParserError as e:
        print("cannot parse value for option 'node': %s"%args.nodes)
    except AssertionError as e:
        print("argument to option 'node' is invalid: %s"%args.nodes)
    if clusters == None:
        print("expected argument --node '[[name1,name2,...],...]'")
        sys.exit(0)
    nodes=" ".join([" ".join(cluster) for cluster in clusters])
    print(clusters)
    print(nodes)
    print(args)
    sys.exit(0)

def parse_ratester_args(sysargs):
    ratester_env = {}
    parser=argparse.ArgumentParser(sys.argv[0], add_help=False)
    parser.add_argument('--ssh', help='ssh config file that to connect to nodes')
    parser.add_argument('--nodes', help='nodes to use for the tests')
    parser.add_argument('--package-mapping', help='YAML file that remaps package names based on distro')
    knownargs, unknownargs = parser.parse_known_args()
    if any(x in unknownargs for x in ("-h", "--help")):
        parser.print_help()
        print()
    if '[' in knownargs.nodes:
        try:
            clusters=yaml.load(knownargs.nodes)
            assert isinstance(clusters, list)
            assert [isinstance(c, list) for c in clusters]
            assert [[isinstance(n, str) for n in c] for c in clusters]
        except yaml.parser.ParserError as e:
            print("cannot parse value for option 'node': %s"%args.nodes)
        except AssertionError as e:
            print("argument to option 'node' is invalid: %s"%args.nodes)
        if clusters == None:
            print("expected argument --node '[[name1,name2,...],...]'")
            sys.exit(0)
        ratester_env['clusters']=clusters
        ctsnodes=" ".join([" ".join(cluster) for cluster in clusters])
    else:
        ctsnodes=knownargs.nodes
        ratester_env['clusters']=[ctsnodes.split()]
    unknownargs = ["--nodes", ctsnodes] + unknownargs
    if knownargs.ssh:
        rsh=RemoteFactory.rsh
        file_flag = " -F %s"%knownargs.ssh
        rsh.Command += file_flag
        rsh.CpCommand += file_flag

    mapping = os.path.abspath(knownargs.package_mapping or "distrib-pkgs.yml")
    if not os.path.isfile(mapping):
        print("could not load package mapping file '%s'"%mapping)
        sys.exit(1)
    ratester_env["package_mapping"] = mapping
    return (ratester_env, unknownargs)

def inject_ratester_env(ratester_env,env):
    for key in ['clusters', 'package_mapping']:
        env[key] = ratester_env[key]

if __name__ == '__main__':
    # TODO: get rid of those temporary hooks in CTS
    import tracemalloc
    tracemalloc.start()
    prepare_cts()
    ratester_env, cts_args = parse_ratester_args(sys.argv[1:])
    env = CtsLab(["--stonith","no"]+cts_args)
    inject_ratester_env(ratester_env, env)
    cluster_manager = crm_corosync(env)
    log=LogFactory()
    log.add_stderr()

    all_ra_modules = load_ra_modules()
    all_audits = RATesterAuditList(cluster_manager)

    # if not env.has_key("cluster_manager"):
    #      env["cluster_manager"] = "pcmk1"
    # if not env.has_key("cluster_manager"):
    #     print("Detecting pacemaker version on the target cluster nodes")
    #     name = autodetect_cluster_manager(env)
    #     env["cluster_manager"] = name
    #     print("Using cluster manager module \"%s\""%name)
    # if not env.has_key("container_engine"):
    #     print("Detecting container engine on the target cluster nodes")
    #     name = autodetect_container_engine(env)
    #     env["container_engine"] = name
    #     print("Using container engine module \"%s\""%name)
    # if not env.has_key("package_manager"):
    #     print("Detecting package type and distribution flavor")
    #     name = autodetect_package_manager(env)
    #     env["package_manager"] = name
    #     print("Package manager \"%s\" configured"%type(name).__name__)
    distrib = autodetect_distribution(env)
    env["distribution"] = distrib
    # env["package_manager"] = distrib.package_manager()
    # env["container_engine"] = distrib.container_engine()
    # env["cluster_manager"] = distrib.cluster_manager()

    env["stonith"]=False
    if env["DoFencing"]==1 or (env.has_key("DoStonith") and env["DoStonith"]==1):
        env["stonith"]=True

    for i in [x for x in all_audits if isinstance(x,LogAudit)]:
        i.kinds = [ "journal", "remote" ]

    # sort tests by scenario
    all_scenarios = build_scenario_list(env, all_ra_modules)
    all_fencing = build_fencing_list(env, all_ra_modules)
    all_tests = build_test_list(cluster_manager, all_ra_modules, all_audits)
    available = {}
    for m in all_ra_modules:
        available[m.name]={}
        dict_scenario = all_scenarios[m]
        for scenario in dict_scenario.keys():
            available[m.name][scenario] = {
                "scenario": scenario,
                "components": all_scenarios[m][scenario],
                "fencing": all_fencing[m],
                "tests": all_tests[m]
                }

    # --choose module1:scenario1:test1,module1:scenario2:test4,module2,module2:scenario1
    # split and flatten tests in case command line have several --choose
    parsed_tests=sum([t.split(",") for t in env["tests"]], [])
    if len(parsed_tests) != 0:
        match = None
        filtered_modules={}
        for name in parsed_tests:
            if ':' not in name: name = name+':'
            module, rest = name.split(":",1)
            oldmodule = filtered_modules.get(module,{})
            if rest != '':
                if ':' not in rest: rest = rest+':'
                scenario, test = rest.split(":",1)
                oldtests = oldmodule.get(scenario,[])
                if test != '':
                    # specific test from a scenario
                    oldmodule[scenario] = oldtests+[test]
                else:
                    # all tests from the scenario
                    alltests = available[module][scenario]["tests"]
                    alltestnames = [t.name for t in alltests]
                    oldmodule[scenario] = oldtests+alltestnames
                filtered_modules[module]=oldmodule
            else:
                for scenario in available[module].keys():
                    alltests = available[module][scenario]["tests"]
                    alltestnames = [t.name for t in alltests]
                    oldmodule[scenario] = alltestnames
                    filtered_modules[module]=oldmodule

        filtered = {}
        for m in available.keys():
            if m in filtered_modules:
                filtered[m] = {}
                for scenario in available[m]:
                    if scenario in filtered_modules[m]:
                        filtered[m][scenario] = {
                            "scenario": available[m][scenario]["scenario"],
                            "components": available[m][scenario]["components"],
                            "fencing": available[m][scenario]["fencing"]
                            }
                        tests_filtered=[]
                        for t in available[m][scenario]["tests"]:
                            if t.name in filtered_modules[m][scenario] or \
                               any([t.name.startswith(x) for x in filtered_modules[m][scenario]]):
                                tests_filtered.append(t)
                        filtered[m][scenario]["tests"] = tests_filtered

        if len(filtered.keys()) == 0:
            log.log("--choose: No applicable/valid tests chosen")
            log.log("format: --choose Module:Scenario:Test")
            sys.exit(1)
        else:
            selected = filtered
    else:
        selected = available

    if env["ListTests"] == 1:
        log.log("Total %d tests"%count_all_tests(selected))
        for m in selected.keys():
            for s in selected[m].keys():
                log.log(m+":"+s+":")
                for t in selected[m][s]["tests"]:
                    log.log("   - "+str(t.name));
        exit(0)

    if env.has_key("verbose"):
        for m in selected.keys():
            for scenario in selected[m].values():
                for t in scenario['tests']:
                    t.verbose = True
                for c in scenario['components']:
                    c.verbose = True

    # Set the signal handler
    signal.signal(15, sig_handler)
    signal.signal(10, sig_handler)

    verbose = env.has_key("verbose")
    for m in selected:
        for s in selected[m]:
            desc=selected[m][s]
            num_iter = env["iterations"]
            if num_iter != None:
                desc['tests'] *= num_iter
            num_tests = len(desc['tests'])
            log.log(">>>>>>>>>>>>>>>> Starting scenario %s:%s (%d tests)"%(m, s, num_tests))
            log.log("Documentation:          %s" % inspect.getdoc(desc['components'][0]))
            log.log("CTS Master:             %s" % env["cts-master"])
            log.log("CTS Logfile:            %s" % env["OutputFile"])
            log.log("Random Seed:            %s" % env["RandSeed"])
            log.log("Syslog variant:         %s" % env["syslogd"].strip())
            log.log("System log files:       %s" % env["LogFileName"])
            if verbose:
                log.log("verbose mode will log cluster actions")

            if env["stonith"]:
                if desc['fencing'] != None:
                    setup_stonith = [desc['fencing']]
                else:
                    setup_stonith = [RATesterDefaultFencing(env, verbose)]
            else:
                setup_stonith = []

            runner = RARunner(cluster_manager,
                              desc['components']+setup_stonith,
                              all_audits,
                              desc['tests'])
            env.dump()
            env.run(runner, num_tests)
